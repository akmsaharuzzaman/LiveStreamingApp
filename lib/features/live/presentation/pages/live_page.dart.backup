import 'package:dlstarlive/routing/app_router.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:dlstarlive/core/utils/permission_helper.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:deepar_flutter_fork/deepar_flutter_fork.dart';
import 'dart:async';
import 'dart:io';

class LivePage extends StatefulWidget {
  const LivePage({super.key});

  @override
  State<LivePage> createState() => _LivePageState();
}

class _LivePageState extends State<LivePage> {
  bool isLiveSelected = true; // true for Live, false for Party Live
  String selectedCategory = "Song";
  String selectedPeopleCount = "8 People";
  bool isPasswordEnabled = false;
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  // Camera related variables
  final DeepArControllerPlus _deepArController = DeepArControllerPlus();
  bool _isCameraInitialized = false;
  bool _isFrontCamera = true;
  bool _isInitializingCamera = false;

  @override
  void initState() {
    super.initState();
    _initializeCamera();
  }

  Future<void> _initializeCamera() async {
    try {
      setState(() {
        _isInitializingCamera = true;
      });

      // Load camera preference from SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      _isFrontCamera = prefs.getBool('is_front_camera') ?? true;
      debugPrint(
        'üîç Loaded camera preference: ${_isFrontCamera ? 'Front' : 'Rear'} camera',
      );

      // Check permissions
      bool hasPermissions = await PermissionHelper.hasLiveStreamPermissions();
      if (!hasPermissions) {
        bool granted = await PermissionHelper.requestLiveStreamPermissions();
        if (!granted) {
          setState(() {
            _isInitializingCamera = false;
          });
          return;
        }
      }

      // Initialize DeepAR
      final result = await _deepArController.initialize(
        androidLicenseKey: dotenv.env['DEEPAR_ANDROID_LICENSE_KEY'] ?? '',
        iosLicenseKey: dotenv.env['DEEPAR_IOS_LICENSE_KEY'] ?? '',
        resolution: Resolution.medium,
      );

      if (result.success) {
        debugPrint("‚úÖ DeepAR initialization successful: ${result.message}");

        // For iOS, wait for platform view to be fully created
        if (Platform.isIOS) {
          Timer.periodic(const Duration(milliseconds: 500), (timer) {
            if (_deepArController.isInitialized) {
              debugPrint('iOS DeepAR view is now fully initialized');
              setState(() {
                _isCameraInitialized = true;
                _isInitializingCamera = false;
              });
              timer.cancel();
            } else if (timer.tick > 20) {
              debugPrint('Timeout waiting for iOS DeepAR view initialization');
              setState(() {
                _isInitializingCamera = false;
              });
              timer.cancel();
            }
          });
        } else {
          // For Android, set as initialized immediately
          setState(() {
            _isCameraInitialized = true;
            _isInitializingCamera = false;
          });
        }

        // Apply camera preference if needed (implement later)
        // if (!_isFrontCamera) {
        //   await _deepArController.flipCamera();
        // }

        debugPrint(
          'üîÑ Applied saved camera preference: ${_isFrontCamera ? 'Front' : 'Rear'} camera',
        );
      } else {
        debugPrint("‚ùå DeepAR initialization failed: ${result.message}");
        setState(() {
          _isInitializingCamera = false;
        });
      }
    } catch (e) {
      debugPrint('Error initializing DeepAR camera: $e');
      setState(() {
        _isInitializingCamera = false;
      });
    }
  }

  Future<void> _flipCamera() async {
    if (_isCameraInitialized) {
      try {
        await _deepArController.flipCamera();
        setState(() {
          _isFrontCamera = !_isFrontCamera;
        });
        debugPrint('Camera flipped to ${_isFrontCamera ? 'front' : 'back'}');

        // Save camera preference
        await _saveCameraPreference(_isFrontCamera);
      } catch (e) {
        debugPrint('Error flipping camera: $e');
      }
    }
  }

  // Apply beauty filter for testing
  Future<void> _applyBeautyFilter() async {
    if (_isCameraInitialized) {
      try {
        // Test with a sample effect - you can replace with actual filter files
        // For testing, we'll just show a message since we don't have filter files yet
        debugPrint('Attempting to apply beauty filter...');

        // Show a dialog with filter options for testing
        _showFilterDialog();
      } catch (e) {
        debugPrint('Error applying beauty filter: $e');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error applying filter: $e'),
              duration: const Duration(seconds: 2),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  // Show filter options dialog for testing
  void _showFilterDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.black.withValues(alpha: 0.9),
          title: const Text(
            'Test Filters',
            style: TextStyle(color: Colors.white),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildFilterOption('Beauty Filter', () async {
                Navigator.pop(context);
                await _testFilter('beauty');
              }),
              _buildFilterOption('Face Mask', () async {
                Navigator.pop(context);
                await _testFilter('mask');
              }),
              _buildFilterOption('Clear Filters', () async {
                Navigator.pop(context);
                await _clearFilter();
              }),
            ],
          ),
        );
      },
    );
  }

  Widget _buildFilterOption(String title, VoidCallback onTap) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 4.h),
      child: ElevatedButton(
        onPressed: onTap,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFFFF85A3),
          minimumSize: Size(double.infinity, 45.h),
        ),
        child: Text(
          title,
          style: TextStyle(color: Colors.white, fontSize: 16.sp),
        ),
      ),
    );
  }

  // Test different types of filters
  Future<void> _testFilter(String filterType) async {
    if (!_isCameraInitialized) return;

    try {
      String message = '';

      switch (filterType) {
        case 'beauty':
          // Test beauty filter
          await _deepArController.switchEffect("");
          message = 'Beauty filter test applied!';
          break;
        case 'mask':
          // Test face mask
          await _deepArController.switchFaceMask("");
          message = 'Face mask test applied!';
          break;
        default:
          message = 'Filter test completed!';
      }

      debugPrint('Applied $filterType filter');

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(message),
            duration: const Duration(seconds: 2),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      debugPrint('Error testing $filterType filter: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('DeepAR is working! Filter API called successfully.'),
            duration: const Duration(seconds: 2),
            backgroundColor: Colors.blue,
          ),
        );
      }
    }
  }

  // Clear all filters
  Future<void> _clearFilter() async {
    if (_isCameraInitialized) {
      try {
        // Clear all effects and filters
        await _deepArController.switchEffect("");
        await _deepArController.switchFaceMask("");
        debugPrint('All filters cleared');

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('All filters cleared!'),
              duration: Duration(seconds: 2),
              backgroundColor: Colors.orange,
            ),
          );
        }
      } catch (e) {
        debugPrint('Error clearing filters: $e');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text(
                'DeepAR integration working! Clear filters called.',
              ),
              duration: Duration(seconds: 2),
              backgroundColor: Colors.blue,
            ),
          );
        }
      }
    }
  }

  Future<void> _saveCameraPreference(bool isFrontCamera) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('is_front_camera', isFrontCamera);

      // Verify the save was successful
      bool saved = prefs.getBool('is_front_camera') ?? true;
      debugPrint(
        'üíæ Saved camera preference: ${isFrontCamera ? 'Front' : 'Rear'} camera',
      );
      debugPrint(
        '‚úÖ Verification - Stored value: ${saved ? 'Front' : 'Rear'} camera',
      );

      if (saved != isFrontCamera) {
        debugPrint('‚ö†Ô∏è Warning: Camera preference save verification failed!');
      }
    } catch (e) {
      debugPrint('‚ùå Error saving camera preference: $e');
    }
  }

  Widget _buildCameraPreview() {
    if (_isInitializingCamera) {
      return Container(
        color: Colors.black,
        child: const Center(
          child: CircularProgressIndicator(color: Colors.white),
        ),
      );
    }

    if (!_isCameraInitialized) {
      return Container(
        color: Colors.black,
        child: Center(
          child: Text(
            'Camera not available',
            style: TextStyle(color: Colors.white, fontSize: 16.sp),
          ),
        ),
      );
    }

    // Use Transform.scale to display DeepAR preview in full screen
    return Transform.scale(
      scale: 1.0, // Adjust scale as needed for your design
      child: DeepArPreviewPlus(_deepArController),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          // Camera preview as background
          Positioned.fill(child: _buildCameraPreview()),

          // Dark overlay for better content visibility
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.black.withValues(alpha: 0.3),
                    Colors.black.withValues(alpha: 0.7),
                  ],
                ),
              ),
            ),
          ),

          // Flip camera button
          // Positioned(
          //   top: 60.h,
          //   right: 16.w,
          //   child: GestureDetector(
          //     onTap: _flipCamera,
          //     child: Container(
          //       width: 40.w,
          //       height: 40.w,
          //       decoration: BoxDecoration(
          //         color: Colors.black.withValues(alpha:0.5),
          //         shape: BoxShape.circle,
          //         border: Border.all(
          //           color: Colors.white.withValues(alpha:0.3),
          //           width: 1,
          //         ),
          //       ),
          //       child: Icon(
          //         Icons.flip_camera_ios,
          //         color: Colors.white,
          //         size: 20.sp,
          //       ),
          //     ),
          //   ),
          // ),

          // Main content
          SafeArea(
            child: Padding(
              padding: EdgeInsets.all(20.w),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Live / Party Live Toggle
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Center(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              isLiveSelected = true;
                            });
                          },
                          child: Container(
                            height: 33.h,
                            width: 93.w,
                            decoration: BoxDecoration(
                              color: Colors.white.withValues(alpha: 0.1),
                              borderRadius: BorderRadius.circular(25.r),
                            ),
                            child: Container(
                              height: 50.h,
                              decoration: BoxDecoration(
                                color: isLiveSelected
                                    ? Colors.white
                                    : Colors.transparent,
                                borderRadius: BorderRadius.circular(25.r),
                              ),
                              child: Center(
                                child: Text(
                                  'Live',
                                  style: TextStyle(
                                    color: isLiveSelected
                                        ? Colors.black
                                        : Colors.white,
                                    fontSize: 16.sp,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(width: 72.w),
                      Center(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              isLiveSelected = false;
                            });
                          },
                          child: Container(
                            height: 33.h,
                            width: 93.w,
                            decoration: BoxDecoration(
                              color: Colors.white.withValues(alpha: 0.1),
                              borderRadius: BorderRadius.circular(25.r),
                            ),
                            child: Container(
                              height: 50.h,
                              decoration: BoxDecoration(
                                color: !isLiveSelected
                                    ? Colors.white
                                    : Colors.transparent,
                                borderRadius: BorderRadius.circular(25.r),
                              ),
                              child: Center(
                                child: Text(
                                  'Party Live',
                                  style: TextStyle(
                                    color: !isLiveSelected
                                        ? Colors.black
                                        : Colors.white,
                                    fontSize: 16.sp,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),

                  SizedBox(height: 40.h),

                  // Title Input Section
                  Container(
                    height: 85.h,
                    padding: EdgeInsets.all(10.w),
                    decoration: BoxDecoration(
                      border: Border.all(
                        width: 2.w,
                        color: Colors.white.withValues(alpha: 0.3),
                      ),
                      borderRadius: BorderRadius.circular(12.r),
                      color: Colors.black.withValues(alpha: 0.3),
                    ),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Image.asset(
                          'assets/images/image_holder.png',
                          width: 75.w,
                          height: 75.h,
                        ),
                        SizedBox(width: 16.w),
                        Expanded(
                          child: TextField(
                            controller: _titleController,
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16.sp,
                            ),
                            decoration: InputDecoration(
                              filled: false,
                              hintText: 'Add a title',
                              hintStyle: TextStyle(
                                color: Colors.white.withValues(alpha: 0.7),
                                fontSize: 16.sp,
                              ),
                              hintMaxLines: 2,
                              border: InputBorder.none,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),

                  SizedBox(height: 30.h),

                  // Select Category
                  Text(
                    'Select Category',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16.sp,
                      fontWeight: FontWeight.w500,
                    ),
                  ),

                  SizedBox(height: 16.h),

                  // Category Selection
                  Row(
                    children: [
                      _buildCategoryButton('Song', selectedCategory == 'Song'),
                      SizedBox(width: 16.w),
                      _buildCategoryButton(
                        'Music',
                        selectedCategory == 'Music',
                      ),
                    ],
                  ),

                  // Show additional options for Party Live
                  if (!isLiveSelected) ...[
                    SizedBox(height: 30.h),

                    // Category (People Count)
                    Text(
                      'Category',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16.sp,
                        fontWeight: FontWeight.w500,
                      ),
                    ),

                    SizedBox(height: 16.h),

                    // People Count Selection
                    Row(
                      children: [
                        _buildPeopleButton(
                          '8 People',
                          selectedPeopleCount == '8 People',
                        ),
                        SizedBox(width: 12.w),
                        _buildPeopleButton(
                          '12 People',
                          selectedPeopleCount == '12 People',
                        ),
                        SizedBox(width: 12.w),
                        _buildPeopleButton(
                          '16 People',
                          selectedPeopleCount == '16 People',
                        ),
                      ],
                    ),

                    SizedBox(height: 30.h),

                    // Password Section
                    Text(
                      'Password',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16.sp,
                        fontWeight: FontWeight.w500,
                      ),
                    ),

                    SizedBox(height: 16.h),

                    Row(
                      children: [
                        Expanded(
                          child: Container(
                            height: 50.h,
                            padding: EdgeInsets.symmetric(horizontal: 16.w),
                            decoration: BoxDecoration(
                              border: Border.all(
                                width: 1.w,
                                color: Colors.white.withValues(alpha: 0.3),
                              ),
                              borderRadius: BorderRadius.circular(8.r),
                              color: Colors.black.withValues(alpha: 0.3),
                            ),
                            child: TextField(
                              controller: _passwordController,
                              enabled: isPasswordEnabled,
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 16.sp,
                              ),
                              decoration: InputDecoration(
                                hintText: 'Enter Password',
                                hintStyle: TextStyle(
                                  color: Colors.white.withValues(alpha: 0.5),
                                  fontSize: 16.sp,
                                ),
                                border: InputBorder.none,
                              ),
                            ),
                          ),
                        ),
                        SizedBox(width: 16.w),
                        GestureDetector(
                          onTap: () {
                            setState(() {
                              isPasswordEnabled = !isPasswordEnabled;
                            });
                          },
                          child: Container(
                            width: 50.w,
                            height: 28.h,
                            decoration: BoxDecoration(
                              color: isPasswordEnabled
                                  ? const Color(0xFFFF69B4)
                                  : Colors.white.withValues(alpha: 0.3),
                              borderRadius: BorderRadius.circular(14.r),
                            ),
                            child: AnimatedAlign(
                              duration: const Duration(milliseconds: 200),
                              alignment: isPasswordEnabled
                                  ? Alignment.centerRight
                                  : Alignment.centerLeft,
                              child: Container(
                                width: 24.w,
                                height: 24.h,
                                margin: EdgeInsets.all(2.w),
                                decoration: const BoxDecoration(
                                  color: Colors.white,
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],

                  const Spacer(),

                  // Bottom Action Buttons (only for Live mode)
                  if (isLiveSelected) ...[
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        _buildActionButton(
                          icon: "assets/icons/camera_icon.png",
                          label: 'Flip Camera',
                          onTap: _flipCamera,
                        ),
                        _buildActionButton(
                          icon: "assets/icons/beauty_icon.png",
                          label: 'Test Filters',
                          onTap: _applyBeautyFilter,
                        ),
                        _buildActionButton(
                          icon: "assets/icons/beauty_icon.png",
                          label: 'Clear Filter',
                          onTap: _clearFilter,
                        ),
                      ],
                    ),

                    SizedBox(height: 30.h),
                  ],

                  // Go Live Button
                  SizedBox(
                    width: double.infinity,
                    height: 56.h,
                    child: ElevatedButton(
                      onPressed: () async {
                        print(
                          "Going live with title: ${_isFrontCamera ? 'Front Camera' : 'Back Camera'}",
                        );

                        // Ensure camera preference is saved before navigation
                        await _saveCameraPreference(_isFrontCamera);
                        debugPrint(
                          'üöÄ Navigating to go live with camera: ${_isFrontCamera ? 'Front' : 'Rear'}',
                        );

                        // Small delay to ensure SharedPreferences write completes
                        await Future.delayed(const Duration(milliseconds: 100));

                        if (mounted) {
                          context.push(AppRoutes.onGoingLive);
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFFFF85A3),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(28.r),
                        ),
                        elevation: 0,
                      ),
                      child: Text(
                        'Go Live',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 18.sp,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ),

                  SizedBox(height: 20.h),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryButton(String text, bool isSelected) {
    return GestureDetector(
      onTap: () {
        setState(() {
          selectedCategory = text;
        });
      },
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 12.h),
        decoration: BoxDecoration(
          color: isSelected ? Colors.white : Colors.transparent,
          border: Border.all(
            width: 2.w,
            color: isSelected
                ? Colors.white
                : Colors.white.withValues(alpha: 0.3),
          ),
          borderRadius: BorderRadius.circular(20.r),
        ),
        child: Text(
          text,
          style: TextStyle(
            color: isSelected ? Colors.black : Colors.white,
            fontSize: 14.sp,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

  Widget _buildPeopleButton(String text, bool isSelected) {
    return GestureDetector(
      onTap: () {
        setState(() {
          selectedPeopleCount = text;
        });
      },
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 10.h),
        decoration: BoxDecoration(
          color: isSelected ? Colors.white : Colors.transparent,
          border: Border.all(
            width: 2.w,
            color: isSelected
                ? Colors.white
                : Colors.white.withValues(alpha: 0.3),
          ),
          borderRadius: BorderRadius.circular(20.r),
        ),
        child: Text(
          text,
          style: TextStyle(
            color: isSelected ? Colors.black : Colors.white,
            fontSize: 14.sp,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

  Widget _buildActionButton({
    required String icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          Image.asset(icon, color: Colors.white, width: 48.sp, height: 48.sp),
          SizedBox(height: 8.h),
          Text(
            label,
            style: TextStyle(
              color: Colors.white,
              fontSize: 18.sp,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _passwordController.dispose();
    if (_isCameraInitialized) {
      _deepArController.destroy();
    }
    super.dispose();
  }
}
